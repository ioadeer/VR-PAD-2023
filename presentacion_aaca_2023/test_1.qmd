---
title: ""
bibliography: bib/references.bib
authors: 
format: 
  revealjs:
    theme: simple
    logo: imgs/logos/logo_acaa.png
editor: visual
---

```{r message=FALSE, warning=FALSE, paged.print=FALSE}

```

## Desarrollo y validación de un entorno visual virtual para experimentos psicofísicos

Joaquín Cerviño, Berenice Piceda, Esteban N. Lombera, Manuel C. Eguía, Ramiro O. Vergara

::: {layout="[[1.5,1.2,1.5],[1]]"}
![](imgs/logos/lapso_black3.png)

![](imgs/logos/Unqui.png) ![](imgs/logos/logo_acaa.png)

![](imgs/logos/Foncyt.png)
:::

## Introducción

### Generación de entornos virtuales para la manipulación experimental

Hacer uso de la capacidad de inmersividad de la Realidad Virtual para probar distintos contextos visuales y su efecto en la percepción auditiva de distancia (PAD). (@calcagno_role_2012)

<!-- ![](imgs/setup/setup_final.png){fig-align="center"} -->

::: columns
::: {.column width="40%"}
-   Entorno visual virtual
-   Estímulos acústicos reales
:::

::: {.column width="60%"}
![](imgs/setup/setup_final.png)
:::
:::

## ¿Cómo es la percepción visual en Realidad Virtual?

La media de las distancias estimadas en entornos virtuales es de un 74% de los entornos modelados debido a

-   limitaciones de calidad gráfica y campo visual (FOV)
-   peso de los cascos

En cascos más modernos, se observa una tendencia a que la percepción en entornos virtuales se equipare a la de entornos reales.

## 

### Diseño de entornos virtuales

::: columns
::: {.column width="40%"}
![](imgs/setup/herramientas_vr/2_salas.png)
:::

::: {.column width="60%"}
![](imgs/setup/herramientas_vr/first_workflow.png)
:::
:::

## 

### Implementación en Realidad virtual

::: columns
::: {.column width="40%"}
<br> ![](imgs/setup/herramientas_vr/unreal_blender2.png)
:::

::: {.column width="60%"}
<br> {{< video ../videos/vr/vr_clip_1.mp4 >}}
:::
:::

## 

### Validación experimental visual de entorno virtual

::: columns
::: {.column width="40%"}
#### Participantes

50 sujetos

-   22 mujeres
-   28 hombres

#### Materiales y métodos

-   Casco HTC Vive Pro
-   Placa GeForce RTX3070
:::

::: {.column width="60%"}
#### Procedimiento

1.  Introducir participantes en sala experimental procurando que en un principio no la vean.
2.  Colocar casco de RV y pedir reporte verbal del tamaño del sala virtual.
3.  Remover casco y pedir reporte verbal del tamaño de sala real.
:::
:::

## 

### Resultados

```{r dependencies,  include=FALSE}
# Dependencias ------------------------------------------------------------
library(broom)
library(broom.mixed)
library(dplyr)
library(ggbeeswarm)
library(gmodels)
library(ggplot2)
library(ggthemes)
library(ggpubr)
library(ggstatsplot)
library(gridExtra)
library(htmlwidgets)
library(quickpsy)
library(tidyverse)
library(lme4)
library(nlme)
library(lmerTest)
library(modelr)
library(scales) 
library(pracma)
library(plotly)
library(Routliers)
library(processx)
library(rstatix)
library(orca)
library(reshape2)
library(ggpubr)
```

```{r}

dimensions.raw  <- read.csv('../analisis-pad-2-salas-vacias/data/volumen_sin_outliers_1_50.csv', header = TRUE, sep = ' ', stringsAsFactors = TRUE)

#colnames(dimensions.raw)

dimensions.volume <- melt(dimensions.raw, id.vars='nsub',
                          measure.vars=c("SG_RV_volumen", "SR_volumen"))

dimensions.volume <- dimensions.volume %>%
  mutate(
    variable = case_when(
      variable == "SG_RV_volumen" ~ "Sala Virtual",
      variable == "SR_volumen" ~ "Sala Real",
    )
  )

# Voy a remover outliers, valores superior 1000 m3
dimensions.volume <- dimensions.volume %>%
  filter(!value >= 1000)

dimensions.volume <- dimensions.volume %>%
  filter(!nsub == 18)

dimensions.volume_aggr <- dimensions.volume %>%
  group_by(variable) %>%
  summarize(
    mean_volume = mean(value),
    sd_volume = sd(value)
  )

eqn1 <- sprintf(
  "M = %.3g ± %.4g",
  dimensions.volume_aggr$mean_volume[1],
  dimensions.volume_aggr$sd_volume[1])

eqn2 <- sprintf(
  "M = %.3g ± %.4g",
  dimensions.volume_aggr$mean_volume[2],
  dimensions.volume_aggr$sd_volume[2])

dimensions.volume <- dimensions.volume %>%
  ungroup()

dimensions.volume <- dimensions.volume %>%
  rename("volume" = "value",
         "condicion" = "variable")

stat.test <- dimensions.volume  %>% 
  t_test(volume~condicion) %>%
  add_significance()

#stat.test

# # A tibble: 1 × 9
# .y.    group1    group2          n1    n2 statistic    df     p p.signif
# <chr>  <chr>     <chr>        <int> <int>     <dbl> <dbl> <dbl> <chr>   
# volume Sala Real Sala Virtual    40    40    -0.203  76.7  0.84 ns   

dim_barchart <- dimensions.volume_aggr %>%
  ggplot(aes(variable, mean_volume)) +
  geom_col(aes(fill = variable), color ="black", width =0.85) +
  geom_errorbar(aes(ymin=mean_volume - sd_volume,
                    ymax=mean_volume + sd_volume),
                color = "#22292F",
                width = .1) +
  #scale_fill_grey(start = 0.3) +
  #ylim = c(0, 300) +
  scale_y_continuous(limits = c(0, 300), expand = c(0, 0)) +
  geom_hline(yintercept=252,linetype="dashed") +
  guides(fill = "none") +
  #theme(legend.position="none") +
  theme_minimal() +
    annotate("text",                        # Add text for mean
           #x = 1.5, # para fig sola
           x = 0.50, # para fig compuesta
           y = 290.0,
           label = eqn1,
           size = 3.5,
           hjust = 0) +
    annotate("text",                        # Add text for mean
           #x = 1.5, # para fig sola
           x = 1.50, # para fig compuesta
           y = 290.0,
           label = eqn2,
           size = 3.5,
           hjust = 0) +
  labs(
    #x = "Condición",
    y = expression("Volumen percibido (m"^3*")"),
    #title = "Volumen de sala real vs virtual",
    #caption = "Barra de errores indica desviación estándar"
  )+
  scale_fill_brewer(palette="YlOrRd")+
  theme(#axis.line = element_blank(),
      axis.title.x = element_blank())

# paired <- ggpaired(dimensions.volume, x = "condicion" , y = "volume")
# plot(paired)

stat.test <- stat.test %>% add_xy_position(x = "condicion", fun = "mean", step.increase = 10) # step.increase = 28)

dim_barchart <- dim_barchart + 
  stat_pvalue_manual(stat.test, label = "p", tip.length = 0.05, size = 3, bracket.shorten = 0.1)

# d,w, h comparasion ------------------------------------------------------
#DEPTH
dimensions.depth <- melt(dimensions.raw, id.vars='nsub',
                         measure.vars=c("SG_RV_depth", "SR_depth"))

dimensions.depth <- dimensions.depth %>%
  mutate(
    variable = case_when(
      variable == "SG_RV_depth" ~ "Virtual",
      variable == "SR_depth" ~ "Real",
    )
  )
dimensions.depth <- dimensions.depth %>%
  rename("Profundidad" = "value",
         "Condición" = "variable")

dimensions.depth <- dimensions.depth %>%
  filter(!Profundidad >= 20)

dimensions.depth_sum <- dimensions.depth %>%
  group_by(Condición) %>%
  summarise(
    mean = mean(Profundidad),
    median = median(Profundidad),
    sd = sd(Profundidad)
  )

eqn1 <- sprintf(
  "M = %.3g ± %.2g \nMdn = %.3g",
  dimensions.depth_sum$mean[1],
  dimensions.depth_sum$sd[1],
  dimensions.depth_sum$median[1])

eqn2 <- sprintf(
  "M = %.3g ± %.2g \nMdn = %.3g",
  dimensions.depth_sum$mean[2],
  dimensions.depth_sum$sd[2],
  dimensions.depth_sum$median[2])


# Use single color
violin_depth <- ggplot(dimensions.depth, aes(x=Condición, y=Profundidad,  fill=Condición)) +
  geom_violin(trim=FALSE) +
  geom_boxplot(width=0.1) +
  geom_jitter(alpha = 0.1) +
   annotate("text",                        # Add text for mean
           #x = 1.5, # para fig sola
           x = 0.50, # para fig compuesta
           y = 18.0,
           label = eqn1,
           size = 3.5,
           hjust = 0) +
    annotate("text",                        # Add text for mean
           #x = 1.5, # para fig sola
           x = 1.50, # para fig compuesta
           y = 18.0,
           label = eqn2,
           size = 3.5,
           hjust = 0) +
  labs(
    y = "Profundidad (m)",
  )+
  theme_minimal() +
  guides(fill = "none") +
  scale_fill_brewer(palette="YlOrRd")+
  #geom_dotplot(binaxis='y', stackdir='center', dotsize=1) +
  geom_hline(yintercept=12,linetype="dashed") +
  theme(
    axis.title.x = element_blank(),
    axis.title.y = element_text(hjust = 0)) 

# ANCHO 

dimensions.width <- melt(dimensions.raw, id.vars='nsub',
                          measure.vars=c("SG_RV_width", "SR_width"))

dimensions.width <- dimensions.width %>%
  mutate(
    variable = case_when(
      variable == "SG_RV_width" ~ "Virtual",
      variable == "SR_width" ~ "Real",
    )
  )

dimensions.width <- dimensions.width %>%
  rename("Ancho" = "value",
         "Condición" = "variable")

dimensions.width <- dimensions.width %>%
  filter(!Ancho >= 10)

dimensions.width_sum <- dimensions.width %>%
  group_by(Condición) %>%
  summarise(
    mean = mean(Ancho),
    median = median(Ancho),
    sd = sd(Ancho)
  )

eqn1 <- sprintf(
  "M = %.3g ± %.2g \nMdn = %.3g",
  dimensions.width_sum$mean[1],
  dimensions.width_sum$sd[1],
  dimensions.width_sum$median[1])

eqn2 <- sprintf(
  "M = %.3g ± %.2g \nMdn = %.3g",
  dimensions.width_sum$mean[2],
  dimensions.width_sum$sd[2],
  dimensions.width_sum$median[2])

# Use single color
violin_width <- ggplot(dimensions.width, aes(x=Condición, y=Ancho,  fill=Condición)) +
  #geom_violin(trim=FALSE, fill='#A4A4A4', color="darkred")+
  geom_violin(trim=FALSE)+
  geom_boxplot(width=0.1) + 
  geom_jitter(alpha = 0.1) +
  # geom_text(data = dimensions.width_sum, aes(x = Condición, y = mean, 
  #   label = paste("Mean: ", round(mean, 1), "\nMedian: ", median, "\nSD: ", round(sd, 1)),
  #   hjust=0, position = ,
  # ))+
    annotate("text",                        # Add text for mean
           #x = 1.5, # para fig sola
           x = 0.50, # para fig compuesta
           y = 10.0,
           label = eqn1,
           size = 3.5,
           hjust = 0) +
    annotate("text",                        # Add text for mean
           #x = 1.5, # para fig sola
           x = 1.50, # para fig compuesta
           y = 10.0,
           label = eqn2,
           size = 3.5,
           hjust = 0) +
  theme_minimal() +
  guides(fill = "none") +
  scale_fill_brewer(palette="YlOrRd")+
  #geom_dotplot(binaxis='y', stackdir='center', dotsize=1) +
  geom_hline(yintercept=7,linetype="dashed")+
  labs(
    y = "Ancho (m)",
  ) +
  theme(
    axis.title.x = element_blank()) 

# ALTO

dimensions.height <- melt(dimensions.raw, id.vars='nsub',
                         measure.vars=c("SG_RV_height", "SR_height"))

dimensions.height <- dimensions.height %>%
  mutate(
    variable = case_when(
      variable == "SG_RV_height" ~ "Virtual",
      variable == "SR_height" ~ "Real",
    )
  )

dimensions.height <- dimensions.height %>%
  rename("Alto" = "value",
         "Condición" = "variable")

dimensions.height <- dimensions.height %>%
  filter(!Alto >= 6)

dimensions.height_sum <- dimensions.height %>%
  group_by(Condición) %>%
  summarise(
    mean = mean(Alto),
    median = median(Alto),
    sd = sd(Alto)
  )

eqn1 <- sprintf(
  "M = %.3g ± %.2g \nMdn = %.3g",
  dimensions.height_sum$mean[1],
  dimensions.height_sum$sd[1],
  dimensions.height_sum$median[1])

eqn2 <- sprintf(
  "M = %.3g ± %.2g \nMdn = %.3g",
  dimensions.height_sum$mean[2],
  dimensions.height_sum$sd[2],
  dimensions.height_sum$median[2])

# Use single color
violin_height <- ggplot(dimensions.height, aes(x=Condición, y=Alto,  fill=Condición)) +
  geom_violin(trim=FALSE)+
  geom_boxplot(width=0.1) + 
  geom_jitter(alpha = 0.1) +
  annotate("text",                        # Add text for mean
           #x = 1.5, # para fig sola
           x = 0.50, # para fig compuesta
           y = 5.5,
           label = eqn1,
           size = 3.5,
           hjust = 0) +
    annotate("text",                        # Add text for mean
           #x = 1.5, # para fig sola
           x = 1.50, # para fig compuesta
           y = 5.5,
           label = eqn2,
           size = 3.5,
           hjust = 0) +
  theme_minimal() +
  guides(fill = "none") +
  scale_fill_brewer(palette="YlOrRd")+
  #geom_dotplot(binaxis='y', stackdir='center', dotsize=1) +
  geom_hline(yintercept=3,linetype="dashed") +
  labs(
    y = "Alto (m)",
  ) +
  theme(
    axis.title.x = element_blank()) 

#plot(violin_height)


# figure <- ggarrange(violin_depth, violin_width,violin_height,
#                     ncol = 3, labels = c("B", "C", "D"))

figure <- ggarrange(dim_barchart, 
                    ggarrange(violin_depth, violin_width,violin_height,
                    nrow = 3, labels = c("B", "C", "D")),
                    ncol = 2, 
                    labels ="A",
                    heights = c(1, 0.75))
figure
```

## 

### References

::: {#refs}
:::
